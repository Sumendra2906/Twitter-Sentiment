# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hCNiTWo6GTnCl9o5ruO_BciBD8EWl-_y
"""

#pip install flair

import pandas as pd
import numpy as np

columns = ['sentiment','id','date','query','user','text']

df = pd.read_csv("/content/drive/MyDrive/Project/training.1600000.processed.noemoticon.csv", header=None, names=columns, encoding="ISO-8859-1").sample(frac=1)

df=df.drop(["id","date","user","query"],axis=1)

#taking a fraction of the database
df = df.iloc[0:int(len(df)*0.125)]

#data preprocessing
def remove_punc(text):
    nopunc = [char for char in text if char not in string.punctuation]
    return ''.join(nopunc)

def clean2(text):
    text = [char for char in text if char in allowed_chars]
    return ''.join(text)

def clean(text):
    text = re.sub(r'@[A-Za-z0-9]+','',text) #removes the @ mentions
    text = re.sub(r'#','',text) #removes the '#'
    text = re.sub(r'https?:\/\/\S+','',text) #removes hyperlinks
    text = remove_punc(text)
    text = clean2(text)
    return text

#importing regular expression library
import re

allowed_chars = ' AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz0123456789~`!@#$%^&*()-=_+[]{}|;:",./<>?'

#Apply the Preprocessing
import string
df['text']=df['text'].apply(clean)

df['sentiment'].value_counts()

# Put __label__ in front of each sentiment
df['sentiment'] = '__label__' + df['sentiment'].astype(str)

#using a fraction of the dataset
#splitting the data into 3 files - train,test and dev
#70,15,15
df.iloc[0:int(len(df)*0.70)].to_csv('/content/drive/MyDrive/Project/train.csv', sep='\t', index = False, header = False)
df.iloc[int(len(df)*0.70):int(len(df)*0.85)].to_csv('/content/drive/MyDrive/Project/test.csv', sep='\t', index = False, header = False)
df.iloc[int(len(df)*0.85):int(len(df)*1.0)].to_csv('/content/drive/MyDrive/Project/dev.csv', sep='\t', index = False, header = False)

# Load the data into Corpus format
from flair.datasets import ClassificationCorpus
from flair.data import Corpus

data_folder = '/content/drive/MyDrive/Project/'

corpus : Corpus = ClassificationCorpus(data_folder=data_folder,test_file='test.csv', dev_file='dev.csv', train_file='train.csv')

# Make label dictionary
label_dict = corpus.make_label_dictionary()

#Working with the Embeddings
from flair.embeddings import WordEmbeddings,DocumentRNNEmbeddings ,FlairEmbeddings

word_embeddings = [WordEmbeddings('glove'),FlairEmbeddings('news-forward-fast')]

import re
import string

document_embeddings = DocumentRNNEmbeddings(word_embeddings, hidden_size=512, reproject_words=True, reproject_words_dimension=256)

#Build and Train the Model
from flair.models import TextClassifier
from flair.trainers import ModelTrainer

classifier = TextClassifier(document_embeddings, label_dictionary=label_dict)

#initilize
trainer = ModelTrainer(classifier, corpus)

trainer.train('/content/drive/MyDrive/Project/model-saves',
              learning_rate=0.1,
              mini_batch_size=32,
              anneal_factor=0.5,
              patience=5,
              max_epochs=100,
              embeddings_storage_mode='gpu')

# Load the model and make predictions
from flair.data import Sentence

classifier = TextClassifier.load('/content/drive/MyDrive/Project/model-saves/best-model.pt')

positive_sentence = Sentence(clean('I love Python!'))
negative_sentence = Sentence(clean('I don\'t like Python'))

classifier.predict(positive_sentence)
classifier.predict(negative_sentence)

print(positive_sentence.labels)
print(negative_sentence.labels)

